# Created with package:mono_repo v5.0.2
name: Dart CI
on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: "0 0 * * 0"
defaults:
  run:
    shell: bash
env:
  PUB_ENVIRONMENT: bot.github

jobs:
  job_001:
    name: mono_repo self validate
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - name: mono_repo self validate
        run: dart pub global activate mono_repo 5.0.2
      - name: mono_repo self validate
        run: dart pub global run mono_repo generate --validate
  job_002:
    name: "analyze_format; PKGS: defaults_provider/defaults_provider_annotations, defaults_provider/defaults_provider_generator, defaults_provider/example, defaults_provider/test, entity/entity_annotations, entity/entity_generator, entity/example, entity/test, entity_adapter/entity_adapter, entity_adapter/entity_adapter_generator, entity_adapter/example, example_model, generators_common, map_mapper/example, map_mapper/map_mapper_annotations, map_mapper/map_mapper_generator, map_mapper/test, map_mapper/test_mongo, proto_mapper/example, proto_mapper/proto_annotations, proto_mapper/proto_generator, proto_mapper/test, squarealfa_security; `dart analyze`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:defaults_provider/defaults_provider_annotations-defaults_provider/defaults_provider_generator-defaults_provider/example-defaults_provider/test-entity/entity_annotations-entity/entity_generator-entity/example-entity/test-entity_adapter/entity_adapter-entity_adapter/entity_adapter_generator-entity_adapter/example-example_model-generators_common-map_mapper/example-map_mapper/map_mapper_annotations-map_mapper/map_mapper_generator-map_mapper/test-map_mapper/test_mongo-proto_mapper/example-proto_mapper/proto_annotations-proto_mapper/proto_generator-proto_mapper/test-squarealfa_security;commands:analyze"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:defaults_provider/defaults_provider_annotations-defaults_provider/defaults_provider_generator-defaults_provider/example-defaults_provider/test-entity/entity_annotations-entity/entity_generator-entity/example-entity/test-entity_adapter/entity_adapter-entity_adapter/entity_adapter_generator-entity_adapter/example-example_model-generators_common-map_mapper/example-map_mapper/map_mapper_annotations-map_mapper/map_mapper_generator-map_mapper/test-map_mapper/test_mongo-proto_mapper/example-proto_mapper/proto_annotations-proto_mapper/proto_generator-proto_mapper/test-squarealfa_security
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: defaults_provider_defaults_provider_annotations_pub_upgrade
        name: defaults_provider/defaults_provider_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_annotations
        run: dart pub upgrade
      - name: defaults_provider/defaults_provider_annotations; dart analyze
        if: "always() && steps.defaults_provider_defaults_provider_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_annotations
        run: dart analyze
      - id: defaults_provider_defaults_provider_generator_pub_upgrade
        name: defaults_provider/defaults_provider_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_generator
        run: dart pub upgrade
      - name: defaults_provider/defaults_provider_generator; dart analyze
        if: "always() && steps.defaults_provider_defaults_provider_generator_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_generator
        run: dart analyze
      - id: defaults_provider_example_pub_upgrade
        name: defaults_provider/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/example
        run: dart pub upgrade
      - name: defaults_provider/example; dart analyze
        if: "always() && steps.defaults_provider_example_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/example
        run: dart analyze
      - id: defaults_provider_test_pub_upgrade
        name: defaults_provider/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/test
        run: dart pub upgrade
      - name: defaults_provider/test; dart analyze
        if: "always() && steps.defaults_provider_test_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/test
        run: dart analyze
      - id: entity_entity_annotations_pub_upgrade
        name: entity/entity_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/entity_annotations
        run: dart pub upgrade
      - name: entity/entity_annotations; dart analyze
        if: "always() && steps.entity_entity_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: entity/entity_annotations
        run: dart analyze
      - id: entity_entity_generator_pub_upgrade
        name: entity/entity_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/entity_generator
        run: dart pub upgrade
      - name: entity/entity_generator; dart analyze
        if: "always() && steps.entity_entity_generator_pub_upgrade.conclusion == 'success'"
        working-directory: entity/entity_generator
        run: dart analyze
      - id: entity_example_pub_upgrade
        name: entity/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/example
        run: dart pub upgrade
      - name: entity/example; dart analyze
        if: "always() && steps.entity_example_pub_upgrade.conclusion == 'success'"
        working-directory: entity/example
        run: dart analyze
      - id: entity_test_pub_upgrade
        name: entity/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/test
        run: dart pub upgrade
      - name: entity/test; dart analyze
        if: "always() && steps.entity_test_pub_upgrade.conclusion == 'success'"
        working-directory: entity/test
        run: dart analyze
      - id: entity_adapter_entity_adapter_pub_upgrade
        name: entity_adapter/entity_adapter; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter
        run: dart pub upgrade
      - name: entity_adapter/entity_adapter; dart analyze
        if: "always() && steps.entity_adapter_entity_adapter_pub_upgrade.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter
        run: dart analyze
      - id: entity_adapter_entity_adapter_generator_pub_upgrade
        name: entity_adapter/entity_adapter_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter_generator
        run: dart pub upgrade
      - name: entity_adapter/entity_adapter_generator; dart analyze
        if: "always() && steps.entity_adapter_entity_adapter_generator_pub_upgrade.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter_generator
        run: dart analyze
      - id: entity_adapter_example_pub_upgrade
        name: entity_adapter/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity_adapter/example
        run: dart pub upgrade
      - name: entity_adapter/example; dart analyze
        if: "always() && steps.entity_adapter_example_pub_upgrade.conclusion == 'success'"
        working-directory: entity_adapter/example
        run: dart analyze
      - id: example_model_pub_upgrade
        name: example_model; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: example_model
        run: dart pub upgrade
      - name: example_model; dart analyze
        if: "always() && steps.example_model_pub_upgrade.conclusion == 'success'"
        working-directory: example_model
        run: dart analyze
      - id: generators_common_pub_upgrade
        name: generators_common; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: generators_common
        run: dart pub upgrade
      - name: generators_common; dart analyze
        if: "always() && steps.generators_common_pub_upgrade.conclusion == 'success'"
        working-directory: generators_common
        run: dart analyze
      - id: map_mapper_example_pub_upgrade
        name: map_mapper/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/example
        run: dart pub upgrade
      - name: map_mapper/example; dart analyze
        if: "always() && steps.map_mapper_example_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/example
        run: dart analyze
      - id: map_mapper_map_mapper_annotations_pub_upgrade
        name: map_mapper/map_mapper_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_annotations
        run: dart pub upgrade
      - name: map_mapper/map_mapper_annotations; dart analyze
        if: "always() && steps.map_mapper_map_mapper_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_annotations
        run: dart analyze
      - id: map_mapper_map_mapper_generator_pub_upgrade
        name: map_mapper/map_mapper_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_generator
        run: dart pub upgrade
      - name: map_mapper/map_mapper_generator; dart analyze
        if: "always() && steps.map_mapper_map_mapper_generator_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_generator
        run: dart analyze
      - id: map_mapper_test_pub_upgrade
        name: map_mapper/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/test
        run: dart pub upgrade
      - name: map_mapper/test; dart analyze
        if: "always() && steps.map_mapper_test_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/test
        run: dart analyze
      - id: map_mapper_test_mongo_pub_upgrade
        name: map_mapper/test_mongo; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/test_mongo
        run: dart pub upgrade
      - name: map_mapper/test_mongo; dart analyze
        if: "always() && steps.map_mapper_test_mongo_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/test_mongo
        run: dart analyze
      - id: proto_mapper_example_pub_upgrade
        name: proto_mapper/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/example
        run: dart pub upgrade
      - name: proto_mapper/example; dart analyze
        if: "always() && steps.proto_mapper_example_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/example
        run: dart analyze
      - id: proto_mapper_proto_annotations_pub_upgrade
        name: proto_mapper/proto_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/proto_annotations
        run: dart pub upgrade
      - name: proto_mapper/proto_annotations; dart analyze
        if: "always() && steps.proto_mapper_proto_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/proto_annotations
        run: dart analyze
      - id: proto_mapper_proto_generator_pub_upgrade
        name: proto_mapper/proto_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/proto_generator
        run: dart pub upgrade
      - name: proto_mapper/proto_generator; dart analyze
        if: "always() && steps.proto_mapper_proto_generator_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/proto_generator
        run: dart analyze
      - id: proto_mapper_test_pub_upgrade
        name: proto_mapper/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/test
        run: dart pub upgrade
      - name: proto_mapper/test; dart analyze
        if: "always() && steps.proto_mapper_test_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/test
        run: dart analyze
      - id: squarealfa_security_pub_upgrade
        name: squarealfa_security; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: squarealfa_security
        run: dart pub upgrade
      - name: squarealfa_security; dart analyze
        if: "always() && steps.squarealfa_security_pub_upgrade.conclusion == 'success'"
        working-directory: squarealfa_security
        run: dart analyze
  job_003:
    name: "analyze_format; PKGS: defaults_provider/defaults_provider_annotations, defaults_provider/defaults_provider_generator, defaults_provider/example, entity/entity_annotations, entity/entity_generator, entity/example, entity_adapter/entity_adapter, entity_adapter/entity_adapter_generator, generators_common, map_mapper/example, map_mapper/map_mapper_annotations, map_mapper/map_mapper_generator, proto_mapper/example, proto_mapper/proto_annotations, proto_mapper/proto_generator, squarealfa_security; `dart format --output=none --set-exit-if-changed .`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:defaults_provider/defaults_provider_annotations-defaults_provider/defaults_provider_generator-defaults_provider/example-entity/entity_annotations-entity/entity_generator-entity/example-entity_adapter/entity_adapter-entity_adapter/entity_adapter_generator-generators_common-map_mapper/example-map_mapper/map_mapper_annotations-map_mapper/map_mapper_generator-proto_mapper/example-proto_mapper/proto_annotations-proto_mapper/proto_generator-squarealfa_security;commands:format"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:defaults_provider/defaults_provider_annotations-defaults_provider/defaults_provider_generator-defaults_provider/example-entity/entity_annotations-entity/entity_generator-entity/example-entity_adapter/entity_adapter-entity_adapter/entity_adapter_generator-generators_common-map_mapper/example-map_mapper/map_mapper_annotations-map_mapper/map_mapper_generator-proto_mapper/example-proto_mapper/proto_annotations-proto_mapper/proto_generator-squarealfa_security
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: defaults_provider_defaults_provider_annotations_pub_upgrade
        name: defaults_provider/defaults_provider_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_annotations
        run: dart pub upgrade
      - name: "defaults_provider/defaults_provider_annotations; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.defaults_provider_defaults_provider_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_annotations
        run: "dart format --output=none --set-exit-if-changed ."
      - id: defaults_provider_defaults_provider_generator_pub_upgrade
        name: defaults_provider/defaults_provider_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_generator
        run: dart pub upgrade
      - name: "defaults_provider/defaults_provider_generator; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.defaults_provider_defaults_provider_generator_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/defaults_provider_generator
        run: "dart format --output=none --set-exit-if-changed ."
      - id: defaults_provider_example_pub_upgrade
        name: defaults_provider/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/example
        run: dart pub upgrade
      - name: "defaults_provider/example; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.defaults_provider_example_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/example
        run: "dart format --output=none --set-exit-if-changed ."
      - id: entity_entity_annotations_pub_upgrade
        name: entity/entity_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/entity_annotations
        run: dart pub upgrade
      - name: "entity/entity_annotations; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.entity_entity_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: entity/entity_annotations
        run: "dart format --output=none --set-exit-if-changed ."
      - id: entity_entity_generator_pub_upgrade
        name: entity/entity_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/entity_generator
        run: dart pub upgrade
      - name: "entity/entity_generator; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.entity_entity_generator_pub_upgrade.conclusion == 'success'"
        working-directory: entity/entity_generator
        run: "dart format --output=none --set-exit-if-changed ."
      - id: entity_example_pub_upgrade
        name: entity/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/example
        run: dart pub upgrade
      - name: "entity/example; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.entity_example_pub_upgrade.conclusion == 'success'"
        working-directory: entity/example
        run: "dart format --output=none --set-exit-if-changed ."
      - id: entity_adapter_entity_adapter_pub_upgrade
        name: entity_adapter/entity_adapter; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter
        run: dart pub upgrade
      - name: "entity_adapter/entity_adapter; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.entity_adapter_entity_adapter_pub_upgrade.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter
        run: "dart format --output=none --set-exit-if-changed ."
      - id: entity_adapter_entity_adapter_generator_pub_upgrade
        name: entity_adapter/entity_adapter_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter_generator
        run: dart pub upgrade
      - name: "entity_adapter/entity_adapter_generator; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.entity_adapter_entity_adapter_generator_pub_upgrade.conclusion == 'success'"
        working-directory: entity_adapter/entity_adapter_generator
        run: "dart format --output=none --set-exit-if-changed ."
      - id: generators_common_pub_upgrade
        name: generators_common; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: generators_common
        run: dart pub upgrade
      - name: "generators_common; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.generators_common_pub_upgrade.conclusion == 'success'"
        working-directory: generators_common
        run: "dart format --output=none --set-exit-if-changed ."
      - id: map_mapper_example_pub_upgrade
        name: map_mapper/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/example
        run: dart pub upgrade
      - name: "map_mapper/example; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.map_mapper_example_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/example
        run: "dart format --output=none --set-exit-if-changed ."
      - id: map_mapper_map_mapper_annotations_pub_upgrade
        name: map_mapper/map_mapper_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_annotations
        run: dart pub upgrade
      - name: "map_mapper/map_mapper_annotations; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.map_mapper_map_mapper_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_annotations
        run: "dart format --output=none --set-exit-if-changed ."
      - id: map_mapper_map_mapper_generator_pub_upgrade
        name: map_mapper/map_mapper_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_generator
        run: dart pub upgrade
      - name: "map_mapper/map_mapper_generator; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.map_mapper_map_mapper_generator_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/map_mapper_generator
        run: "dart format --output=none --set-exit-if-changed ."
      - id: proto_mapper_example_pub_upgrade
        name: proto_mapper/example; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/example
        run: dart pub upgrade
      - name: "proto_mapper/example; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.proto_mapper_example_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/example
        run: "dart format --output=none --set-exit-if-changed ."
      - id: proto_mapper_proto_annotations_pub_upgrade
        name: proto_mapper/proto_annotations; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/proto_annotations
        run: dart pub upgrade
      - name: "proto_mapper/proto_annotations; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.proto_mapper_proto_annotations_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/proto_annotations
        run: "dart format --output=none --set-exit-if-changed ."
      - id: proto_mapper_proto_generator_pub_upgrade
        name: proto_mapper/proto_generator; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/proto_generator
        run: dart pub upgrade
      - name: "proto_mapper/proto_generator; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.proto_mapper_proto_generator_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/proto_generator
        run: "dart format --output=none --set-exit-if-changed ."
      - id: squarealfa_security_pub_upgrade
        name: squarealfa_security; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: squarealfa_security
        run: dart pub upgrade
      - name: "squarealfa_security; dart format --output=none --set-exit-if-changed ."
        if: "always() && steps.squarealfa_security_pub_upgrade.conclusion == 'success'"
        working-directory: squarealfa_security
        run: "dart format --output=none --set-exit-if-changed ."
  job_004:
    name: "unit_test; PKG: defaults_provider/test; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:defaults_provider/test;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:defaults_provider/test
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: defaults_provider_test_pub_upgrade
        name: defaults_provider/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: defaults_provider/test
        run: dart pub upgrade
      - name: defaults_provider/test; dart test
        if: "always() && steps.defaults_provider_test_pub_upgrade.conclusion == 'success'"
        working-directory: defaults_provider/test
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
  job_005:
    name: "unit_test; PKG: entity/test; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:entity/test;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:entity/test
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: entity_test_pub_upgrade
        name: entity/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: entity/test
        run: dart pub upgrade
      - name: entity/test; dart test
        if: "always() && steps.entity_test_pub_upgrade.conclusion == 'success'"
        working-directory: entity/test
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
  job_006:
    name: "unit_test; PKG: generators_common; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:generators_common;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:generators_common
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: generators_common_pub_upgrade
        name: generators_common; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: generators_common
        run: dart pub upgrade
      - name: generators_common; dart test
        if: "always() && steps.generators_common_pub_upgrade.conclusion == 'success'"
        working-directory: generators_common
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
  job_007:
    name: "unit_test; PKG: map_mapper/test; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:map_mapper/test;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:map_mapper/test
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: map_mapper_test_pub_upgrade
        name: map_mapper/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/test
        run: dart pub upgrade
      - name: map_mapper/test; dart test
        if: "always() && steps.map_mapper_test_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/test
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
  job_008:
    name: "unit_test; PKG: map_mapper/test_mongo; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:map_mapper/test_mongo;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:map_mapper/test_mongo
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: map_mapper_test_mongo_pub_upgrade
        name: map_mapper/test_mongo; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: map_mapper/test_mongo
        run: dart pub upgrade
      - name: map_mapper/test_mongo; dart test
        if: "always() && steps.map_mapper_test_mongo_pub_upgrade.conclusion == 'success'"
        working-directory: map_mapper/test_mongo
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
  job_009:
    name: "unit_test; PKG: proto_mapper/test; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:proto_mapper/test;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:proto_mapper/test
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: proto_mapper_test_pub_upgrade
        name: proto_mapper/test; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: proto_mapper/test
        run: dart pub upgrade
      - name: proto_mapper/test; dart test
        if: "always() && steps.proto_mapper_test_pub_upgrade.conclusion == 'success'"
        working-directory: proto_mapper/test
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
  job_010:
    name: "unit_test; PKG: squarealfa_security; `dart test`"
    runs-on: ubuntu-latest
    steps:
      - name: Cache Pub hosted dependencies
        uses: actions/cache@v2.1.6
        with:
          path: "~/.pub-cache/hosted"
          key: "os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:squarealfa_security;commands:test"
          restore-keys: |
            os:ubuntu-latest;pub-cache-hosted;dart:stable;packages:squarealfa_security
            os:ubuntu-latest;pub-cache-hosted;dart:stable
            os:ubuntu-latest;pub-cache-hosted
            os:ubuntu-latest
      - uses: dart-lang/setup-dart@v1.2
        with:
          sdk: stable
      - id: checkout
        uses: actions/checkout@v2.3.4
      - id: squarealfa_security_pub_upgrade
        name: squarealfa_security; dart pub upgrade
        if: "always() && steps.checkout.conclusion == 'success'"
        working-directory: squarealfa_security
        run: dart pub upgrade
      - name: squarealfa_security; dart test
        if: "always() && steps.squarealfa_security_pub_upgrade.conclusion == 'success'"
        working-directory: squarealfa_security
        run: dart test
    needs:
      - job_001
      - job_002
      - job_003
